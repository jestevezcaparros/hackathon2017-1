
/**
 * @file Contributor.cpp
 *
 * This file defines the Contributor class implementation.
 *
 * ITRS Group all rights reserved (c) 2017.
 */

// External dependencies
#include <stdio.h>

// Internal dependencies
#include <SensorSample.h>
#include <Contributor.h>

// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// [constants]
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

#define MAX_PAYLOAD_SIZE 256

// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// [globals]
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

char json_sample[MAX_PAYLOAD_SIZE];

// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// [class definition]
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

namespace io {
namespace valo {
namespace iot {

// ---------------------------------------------------------------------------------------------------------------------
// [constructor]
// ---------------------------------------------------------------------------------------------------------------------
Contributor::Contributor(const Print &p, const char *id, const char *host, int port)
    : p_(p), id_(id), host_(host), port_(port) {
}

// ---------------------------------------------------------------------------------------------------------------------
// [destructor]
// ---------------------------------------------------------------------------------------------------------------------
Contributor::~Contributor() {

}

// ---------------------------------------------------------------------------------------------------------------------
// [feed]
// ---------------------------------------------------------------------------------------------------------------------
void Contributor::feed(const char *uri, const char *sch, ...) {
  // Compose the payload from the given schema and values
  va_list arg_ptr;
  va_start(arg_ptr, sch);
  int count = sprintf(json_sample, sch, arg_ptr);
  // Send the value through the stream
  send(uri, json_sample, count);
  va_end(arg_ptr);
}

// ---------------------------------------------------------------------------------------------------------------------
// [feed]
// ---------------------------------------------------------------------------------------------------------------------
void Contributor::feed(const SensorSample &sample) {
  // Stringify the sample and send it through the stream
  int count = sample.toString(id_, json_sample);
  send(sample.stream_, json_sample, count);
}

// ---------------------------------------------------------------------------------------------------------------------
// [send]
// ---------------------------------------------------------------------------------------------------------------------
void Contributor::send(const char *uri, const char *data, int length) {
  p_.print("POST "); p_.print(uri); p_.println(" HTTP/1.1");            // POST URI
  p_.print("Host:"); p_.print(host_); p_.print(":"); p_.println(port_); // Host header
  p_.println("Content-Type: application/json");                         // JSON content type
  p_.print("Content-Length:"); p_.println(length);                      // Content length
  p_.println();                                                         // End of headers
  p_.println(data);                                                     // POST message body
}

} // iot
} // valo
} // io
